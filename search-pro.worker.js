const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const l of e.keys())if(l===F){const a=o[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=u;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=o[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=o[f+y]+ +b,A=o[f+y+1]+1,w=o[p+y]+1,L=o[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}W(e.get(l),t,s,n,o,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const l=new Map;l.set(u.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(u),e=l}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const l of Object.keys(u)){const a=u[l],h=e._fieldIds[l],m=o.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f==null||f.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,o,u,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,o,u,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(u),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=k(u),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(u,d)),u=l,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),l=u.includes("#"),[a,h]=u.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>o.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(o.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in o)for(const c of o.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":16,\"nextId\":16,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-637ec19d\",\"2\":\"v-637ec19d#前言\",\"3\":\"v-637ec19d#事务同步接口\",\"4\":\"v-637ec19d#使用方式\",\"5\":\"v-637ec19d#基于接口\",\"6\":\"v-637ec19d#基于注解\",\"7\":\"v-637ec19d#注意事项\",\"8\":\"v-637ec19d#注解方式方法入参问题\",\"9\":\"v-637ec19d#aftercommit-aftercompletion-事务范围问题\",\"10\":\"v-637ec19d#实际场景\",\"11\":\"v-637ec19d#总结\",\"12\":\"v-637ec19d#文后思考\",\"13\":\"v-637ec19d@0\",\"14\":\"v-637ec19d@1\",\"15\":\"v-e1e3da16\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,9],\"1\":[2],\"2\":[1,18],\"3\":[1,49],\"4\":[1],\"5\":[1,50],\"6\":[1,98],\"7\":[1],\"8\":[1,37],\"9\":[3,15],\"10\":[1,110],\"11\":[1,11],\"12\":[1,20],\"13\":[null,null,1],\"14\":[null,null,2],\"15\":[1]},\"averageFieldLength\":[1.216346153846154,37.1978021978022,0.2],\"storedFields\":{\"0\":{\"h\":\"关于我\",\"t\":[\"Java 业务开发一枚 (●ˇ∀ˇ●)\",\"Hexo 建站\",\"编写第一篇文章\",\"停更\",\"迁移 VuePress\"]},\"1\":{\"h\":\"Spring 事务同步\"},\"2\":{\"h\":\"前言\",\"t\":[\"事务功能在日常开发中使用并不少，本质上是为了保证一次业务请求处理过程中涉及多次 DB 数据操作时的原子性。而本篇主要讲述的事务功能是实现在事务执行的某个阶段去做某些事，即事务同步。在常规的 Web 应用中，大多是直接使用@Transactional注解方法来完成事务操作，但也有一些特殊情况，需要在事务提交前、提交后等情况下执行某些操作，如资源准备、清理、自定义操作等。\"]},\"3\":{\"h\":\"事务同步接口\",\"t\":[\"事务同步回调接口是TransactionSynchronization，其抽象实现TransactionSynchronizationAdapter源码如下：\",\"public abstract class TransactionSynchronizationAdapter implements TransactionSynchronization, Ordered { // 事务同步回调顺序，当存在多个事务同步且有顺序要去时可指定 @Override public int getOrder() { return Ordered.LOWEST_PRECEDENCE; } // 事务挂起 @Override public void suspend() { } // 事务回复 @Override public void resume() { } // 底层数据会话刷新，需要事务管理器有刷新概念，否则无操作 @Override public void flush() { } // 事务提交前 @Override public void beforeCommit(boolean readOnly) { } // 事务完成前（包括异常回滚） @Override public void beforeCompletion() { } // 事务提交后 @Override public void afterCommit() { } // 事务完成后（包括异常回滚） @Override public void afterCompletion(int status) { } } \",\"从源码可看到事务同步作用就是在事务执行的各个阶段进行方法回调，并可通过Ordered接口控制多个事务同步的执行顺序，在下方事务同步的两种使用方式本质都是利用了该抽象类来实现。 在afterCompletion方法的入参status有三种状态（在TransactionSynchronization接口有定义）：\",\"0：事务完成\",\"1：事务回滚\",\"2：未知错误\"]},\"4\":{\"h\":\"使用方式\"},\"5\":{\"h\":\"基于接口\",\"t\":[\"需要继承TransactionSynchronizationAdapte抽象类，在相应的事务阶段回调方法中实现业务逻辑\",\"在事务方法中通过TransactionSynchronizationManager事务同步管理器注册事务同步\",\"// 创建 public class TxSyncDemo extends TransactionSynchronizationAdapter { private String txName; public TxSyncDemo(String txName) { this.txName = txName; } @Override public void afterCommit() { System.out.println(\\\"事务提交后回调...\\\") } @Override public void afterCompletion(int status) { System.out.println(\\\"事务完成后回调...\\\") System.out.println(\\\"事务名称：\\\" + txName); System.out.println(\\\"事务状态：\\\" + status); } } // 事务接口方法 @RestController public class TxController { @GetMapping(\\\"txDemo\\\") @Transactional(rollbackFor = Exception.class) public void txDemo() { // 模拟 DB 操作：更新和新增 update(); save(); // 注册事务同步对象 TransactionSynchronizationManager.registerSynchronization(new TxSyncDemo(\\\"事务同步测试\\\")); } } \",\"之后调用事务接口，即可看到如下结果：\"]},\"6\":{\"h\":\"基于注解\",\"t\":[\"注解方式需要通过@TransactionalEventListener与ApplicationEvent事件对象两者搭配使用，先看看注解的源码，如下：\",\"@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @EventListener public @interface TransactionalEventListener { // 指定事务阶段 TransactionPhase phase() default TransactionPhase.AFTER_COMMIT; // 不存在事务时，注解的方法是否依然被调用，true 则表示只要事件发布了就回调 boolean fallbackExecution() default false; // ... @AliasFor(annotation = EventListener.class, attribute = \\\"classes\\\") Class[] value() default { }; // 指定感兴趣的事件类名 @AliasFor(annotation = EventListener.class, attribute = \\\"classes\\\") Class[] classes() default { }; // 事务回调的条件，可通过 SpEL 进行编写 String condition() default \\\"\\\"; } \",\"实现步骤：\",\"创建事件对象\",\"使用注解标记方法，并通过注解属性指定回调时的事务阶段和感兴趣的事件\",\"在事务接口方法里，发布相应的事件\",\"// 步骤 1：创建事件类 // 可在这个事件类里注入其它依赖或声明业务逻辑，因此事务同步回调时可获取该事件的信息 public class TxSyncEvent extends ApplicationEvent { public TxSyncEvent(Object source) { super(source); } } // 步骤 2：使用事务注解 @Component public class TxSyncDemo { @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT, classes = TxSyncEvent.class) public void afterCommit() { System.out.println(\\\"事务提交后回调...\\\"); } } // 步骤 3：事务方法里发布事件 @RestController public class TxController { @Resource private ApplicationEventPublisher publisher; @GetMapping(\\\"txDemo\\\") @Transactional(rollbackFor = Exception.class) public void txDemo() { // 模拟 DB 操作：更新和新增 update(); save(); // 发布事件 publisher.publishEvent(new TxSyncEvent(\\\"source\\\")); } } \",\"之后调用事务接口，即可看到注解方法内的内容输出，过于简单不再展示结果图片。\"]},\"7\":{\"h\":\"注意事项\"},\"8\":{\"h\":\"注解方式方法入参问题\",\"t\":[\"按@TransactionalEventListener注解classes属性是否有指定值分情况说明：\",\"无值 \",\"方法入参只能为 0 或 1 个（任意类型）\",\"若方法入参为事件类型，则代表是感兴趣的事件，等同于classes指定了该事件\",\"若方法入参为空或不为事件类型，则表示方法不关心任何事件，任何时候都不会被回调\",\"有值 \",\"只有一个值时，入参必须为该值对应的事件类型，否则抛出参数类型错误异常\",\"多个值时，则入参不需要指定\",\"经过实际测试，classes指定多个值时，入参依然可指定为某个事件类型，若事务方法发布的事件刚好与参数的事件类型一致，则可以正确回调。比如classes={A.class, B.class}，方法入参类型为 A，发布 A 事件时可正确执行，而发布 B 事件则会抛出异常。因此还是推荐不设置参数。\"]},\"9\":{\"h\":\"afterCommit / afterCompletion 事务范围问题\",\"t\":[\"这两个方法在 javadoc 上的描述是：在回调时事务资源可能仍然处于活跃状态并可访问。 经过实际测试，在这两个方法中执行 DB 数据操作，那么操作依旧会参与原事务，会等到方法执行完清理事务资源后，才会真正提交到数据库。可通过TransactionSynchronizationManager.isActualTransactionActive()来判断当前方法是否处于活跃事务中。\"]},\"10\":{\"h\":\"实际场景\",\"t\":[\"举个在 IM 中的例子，如添加好友，该请求处理步骤如下：\",\"数据库 f_req（好友请求） 表添加记录数据，删除目标好友（target）的 f_req 缓存（Redis）\",\"发送通知给 target，让其拉取最新好友请求记录（通过 Netty 异步发送通知）\",\"事务提交，数据真正落库，返回请求处理结果（success / fail）\",\"由于步骤 2 通过 Netty 的 Channel 异步发送通知，因此不受 Spring 事务管理。若只是使用事务注解标记整个处理流程，那么当执行到步骤 2 时，由于事务未提交（DB 数据未更新），当 target 收到通知后重新来查询 f_req，就只会查到旧数据（即缺少最新的请求记录），下图展示过程：假设 A + B 为好友 结合上图梳理流程如下：\",\"A 发起好友请求（Request 1），服务端开启事务，DB 新增数据，删除 B 的 f_req 缓存\",\"服务端发送通知给 B，通知 B 来查询最新的 f_req 数据\",\"当服务端接收 B 的查询请求（Request 2）后，先查询缓存，由于缓存被删除，则查询 DB；因为 Request 1 的事务未提交，所以肯定只会查到旧的 f_req 记录，即 A 发送的 f_req 没了\",\"Request 1 的请求处理完成，事务提交，所有数据落库\",\"从 B 的视角来看，虽然被通知要拉取 f_req，但拿到的却都是旧数据，根本就没有 A 发出的 f_req，属实是“虚空好友请求”了。更糟糕的是，由于旧数据的查询，缓存重新被添加回来，导致图中步骤 1 的缓存删了等于没删，出现缓存与 DB 数据不一致情况，并且至少得等到下一次有用户对 B 发起 f_req，才能将本次的 f_req 数据刷新到缓存。 为避免出现这种情况，就需要保证 B 发起查询请求时，A 的添加好友请求已处理完毕，数据已落库；因此便可利用事务同步来控制步骤 2 在事务完成后执行。 （PS：可能读者会有疑惑，添加请求在流程中明明只有一次 DB 操作，为何还要加事务？原因是流程做了简化，添加好友的流程除了处理好友请求记录外，还会判断用户好友历史记录是否添加过目标用户，若有也会去修改 DB 数据。）\"]},\"11\":{\"h\":\"总结\",\"t\":[\"Spring 事务在日常开发中应用不少，对事务的特性和使用需有所理解，避免因使用不当而带来开发问题。本篇的事务同步功能主要应用在 IM 当中，读者也可思考下，在君有项目中，哪部分的业务实现也可应用该功能。\"]},\"12\":{\"h\":\"文后思考\",\"t\":[\"上方说到事务同步注解方式若classes指定了多个值，方法入参推荐不指定，那么在方法体里如果获取本次事务监听的事件信息呢？\",\"afterCommit/afterCompletion方法回调时若有 DB 数据操作，在事务明明已经提交的情况下，为何还会参与原始事务，并且得等到清理资源时才提交？\",\"PS：戳此《Spring 事务同步-文后思考解答》查看答案，要自己先想想哦(●'◡'●)\"]},\"13\":{\"c\":[\"Spring\"]},\"14\":{\"c\":[\"Spring\",\"Transaction\"]},\"15\":{\"h\":\"Posts\"}},\"dirtCount\":0,\"index\":[[\"◡\",{\"1\":{\"12\":1}}],[\"●\",{\"1\":{\"12\":2}}],[\"●ˇ∀ˇ●\",{\"1\":{\"0\":1}}],[\"要自己先想想哦\",{\"1\":{\"12\":1}}],[\"查看答案\",{\"1\":{\"12\":1}}],[\"戳此\",{\"1\":{\"12\":1}}],[\"上方说到事务同步注解方式若classes指定了多个值\",{\"1\":{\"12\":1}}],[\"上的描述是\",{\"1\":{\"9\":1}}],[\"文后思考解答\",{\"1\":{\"12\":1}}],[\"文后思考\",{\"0\":{\"12\":1}}],[\"哪部分的业务实现也可应用该功能\",{\"1\":{\"11\":1}}],[\"读者也可思考下\",{\"1\":{\"11\":1}}],[\"本篇的事务同步功能主要应用在\",{\"1\":{\"11\":1}}],[\"本质上是为了保证一次业务请求处理过程中涉及多次\",{\"1\":{\"2\":1}}],[\"避免因使用不当而带来开发问题\",{\"1\":{\"11\":1}}],[\"对事务的特性和使用需有所理解\",{\"1\":{\"11\":1}}],[\"总结\",{\"0\":{\"11\":1}}],[\"还会判断用户好友历史记录是否添加过目标用户\",{\"1\":{\"10\":1}}],[\"添加好友的流程除了处理好友请求记录外\",{\"1\":{\"10\":1}}],[\"添加请求在流程中明明只有一次\",{\"1\":{\"10\":1}}],[\"原因是流程做了简化\",{\"1\":{\"10\":1}}],[\"就需要保证\",{\"1\":{\"10\":1}}],[\"就只会查到旧数据\",{\"1\":{\"10\":1}}],[\"为何还会参与原始事务\",{\"1\":{\"12\":1}}],[\"为何还要加事务\",{\"1\":{\"10\":1}}],[\"为避免出现这种情况\",{\"1\":{\"10\":1}}],[\"为好友\",{\"1\":{\"10\":1}}],[\"才能将本次的\",{\"1\":{\"10\":1}}],[\"才会真正提交到数据库\",{\"1\":{\"9\":1}}],[\"出现缓存与\",{\"1\":{\"10\":1}}],[\"导致图中步骤\",{\"1\":{\"10\":1}}],[\"更糟糕的是\",{\"1\":{\"10\":1}}],[\"更新和新增\",{\"1\":{\"5\":1,\"6\":1}}],[\"了\",{\"1\":{\"10\":1}}],[\"虚空好友请求\",{\"1\":{\"10\":1}}],[\"属实是\",{\"1\":{\"10\":1}}],[\"根本就没有\",{\"1\":{\"10\":1}}],[\"但拿到的却都是旧数据\",{\"1\":{\"10\":1}}],[\"但也有一些特殊情况\",{\"1\":{\"2\":1}}],[\"虽然被通知要拉取\",{\"1\":{\"10\":1}}],[\"从\",{\"1\":{\"10\":1}}],[\"从源码可看到事务同步作用就是在事务执行的各个阶段进行方法回调\",{\"1\":{\"3\":1}}],[\"所有数据落库\",{\"1\":{\"10\":1}}],[\"所以肯定只会查到旧的\",{\"1\":{\"10\":1}}],[\"没了\",{\"1\":{\"10\":1}}],[\"记录\",{\"1\":{\"10\":1}}],[\"因为\",{\"1\":{\"10\":1}}],[\"因此便可利用事务同步来控制步骤\",{\"1\":{\"10\":1}}],[\"因此不受\",{\"1\":{\"10\":1}}],[\"因此还是推荐不设置参数\",{\"1\":{\"8\":1}}],[\"因此事务同步回调时可获取该事件的信息\",{\"1\":{\"6\":1}}],[\"先查询缓存\",{\"1\":{\"10\":1}}],[\"先看看注解的源码\",{\"1\":{\"6\":1}}],[\"后\",{\"1\":{\"10\":1}}],[\"来查询最新的\",{\"1\":{\"10\":1}}],[\"来判断当前方法是否处于活跃事务中\",{\"1\":{\"9\":1}}],[\"通知\",{\"1\":{\"10\":1}}],[\"通过\",{\"1\":{\"10\":2}}],[\"服务端发送通知给\",{\"1\":{\"10\":1}}],[\"服务端开启事务\",{\"1\":{\"10\":1}}],[\"删除\",{\"1\":{\"10\":1}}],[\"删除目标好友\",{\"1\":{\"10\":1}}],[\"新增数据\",{\"1\":{\"10\":1}}],[\"结合上图梳理流程如下\",{\"1\":{\"10\":1}}],[\"假设\",{\"1\":{\"10\":1}}],[\"下图展示过程\",{\"1\":{\"10\":1}}],[\"收到通知后重新来查询\",{\"1\":{\"10\":1}}],[\"当中\",{\"1\":{\"11\":1}}],[\"当服务端接收\",{\"1\":{\"10\":1}}],[\"当\",{\"1\":{\"10\":1}}],[\"当存在多个事务同步且有顺序要去时可指定\",{\"1\":{\"3\":1}}],[\"由于旧数据的查询\",{\"1\":{\"10\":1}}],[\"由于缓存被删除\",{\"1\":{\"10\":1}}],[\"由于事务未提交\",{\"1\":{\"10\":1}}],[\"由于步骤\",{\"1\":{\"10\":1}}],[\"时\",{\"1\":{\"10\":1}}],[\"那么在方法体里如果获取本次事务监听的事件信息呢\",{\"1\":{\"12\":1}}],[\"那么当执行到步骤\",{\"1\":{\"10\":1}}],[\"那么操作依旧会参与原事务\",{\"1\":{\"9\":1}}],[\"返回请求处理结果\",{\"1\":{\"10\":1}}],[\"异步发送通知\",{\"1\":{\"10\":2}}],[\"netty\",{\"1\":{\"10\":2}}],[\"new\",{\"1\":{\"5\":1,\"6\":1}}],[\"让其拉取最新好友请求记录\",{\"1\":{\"10\":1}}],[\"发起查询请求时\",{\"1\":{\"10\":1}}],[\"发起\",{\"1\":{\"10\":1}}],[\"发起好友请求\",{\"1\":{\"10\":1}}],[\"发出的\",{\"1\":{\"10\":1}}],[\"发送的\",{\"1\":{\"10\":1}}],[\"发送通知给\",{\"1\":{\"10\":1}}],[\"发布\",{\"1\":{\"8\":1}}],[\"发布事件\",{\"1\":{\"6\":1}}],[\"发布相应的事件\",{\"1\":{\"6\":1}}],[\"缓存重新被添加回来\",{\"1\":{\"10\":1}}],[\"缓存\",{\"1\":{\"10\":2}}],[\"的添加好友请求已处理完毕\",{\"1\":{\"10\":1}}],[\"的缓存删了等于没删\",{\"1\":{\"10\":1}}],[\"的视角来看\",{\"1\":{\"10\":1}}],[\"的请求处理完成\",{\"1\":{\"10\":1}}],[\"的事务未提交\",{\"1\":{\"10\":1}}],[\"的查询请求\",{\"1\":{\"10\":1}}],[\"的\",{\"1\":{\"10\":3}}],[\"表添加记录数据\",{\"1\":{\"10\":1}}],[\"好友请求\",{\"1\":{\"10\":1}}],[\"数据已落库\",{\"1\":{\"10\":1}}],[\"数据刷新到缓存\",{\"1\":{\"10\":1}}],[\"数据不一致情况\",{\"1\":{\"10\":1}}],[\"数据\",{\"1\":{\"10\":2}}],[\"数据未更新\",{\"1\":{\"10\":1}}],[\"数据真正落库\",{\"1\":{\"10\":1}}],[\"数据库\",{\"1\":{\"10\":1}}],[\"数据操作\",{\"1\":{\"9\":1,\"12\":1}}],[\"数据操作时的原子性\",{\"1\":{\"2\":1}}],[\"该请求处理步骤如下\",{\"1\":{\"10\":1}}],[\"中的例子\",{\"1\":{\"10\":1}}],[\"举个在\",{\"1\":{\"10\":1}}],[\"实际场景\",{\"0\":{\"10\":1}}],[\"实现步骤\",{\"1\":{\"6\":1}}],[\"会等到方法执行完清理事务资源后\",{\"1\":{\"9\":1}}],[\"这两个方法在\",{\"1\":{\"9\":1}}],[\"而发布\",{\"1\":{\"8\":1}}],[\"而本篇主要讲述的事务功能是实现在事务执行的某个阶段去做某些事\",{\"1\":{\"2\":1}}],[\"事件则会抛出异常\",{\"1\":{\"8\":1}}],[\"事件时可正确执行\",{\"1\":{\"8\":1}}],[\"事务在日常开发中应用不少\",{\"1\":{\"11\":1}}],[\"事务管理\",{\"1\":{\"10\":1}}],[\"事务范围问题\",{\"0\":{\"9\":1}}],[\"事务方法里发布事件\",{\"1\":{\"6\":1}}],[\"事务接口方法\",{\"1\":{\"5\":1}}],[\"事务状态\",{\"1\":{\"5\":1}}],[\"事务名称\",{\"1\":{\"5\":1}}],[\"事务回调的条件\",{\"1\":{\"6\":1}}],[\"事务回滚\",{\"1\":{\"3\":1}}],[\"事务回复\",{\"1\":{\"3\":1}}],[\"事务完成\",{\"1\":{\"3\":1}}],[\"事务完成后回调\",{\"1\":{\"5\":1}}],[\"事务完成后\",{\"1\":{\"3\":1}}],[\"事务完成前\",{\"1\":{\"3\":1}}],[\"事务提交\",{\"1\":{\"10\":2}}],[\"事务提交后回调\",{\"1\":{\"5\":1,\"6\":1}}],[\"事务提交后\",{\"1\":{\"3\":1}}],[\"事务提交前\",{\"1\":{\"3\":1}}],[\"事务挂起\",{\"1\":{\"3\":1}}],[\"事务功能在日常开发中使用并不少\",{\"1\":{\"2\":1}}],[\"事务同步测试\",{\"1\":{\"5\":1}}],[\"事务同步回调顺序\",{\"1\":{\"3\":1}}],[\"事务同步回调接口是transactionsynchronization\",{\"1\":{\"3\":1}}],[\"事务同步接口\",{\"0\":{\"3\":1}}],[\"事务同步\",{\"0\":{\"1\":1},\"1\":{\"12\":1}}],[\"方法入参推荐不指定\",{\"1\":{\"12\":1}}],[\"方法入参类型为\",{\"1\":{\"8\":1}}],[\"方法入参只能为\",{\"1\":{\"8\":1}}],[\"比如classes=\",{\"1\":{\"8\":1}}],[\"若有也会去修改\",{\"1\":{\"10\":1}}],[\"若只是使用事务注解标记整个处理流程\",{\"1\":{\"10\":1}}],[\"若事务方法发布的事件刚好与参数的事件类型一致\",{\"1\":{\"8\":1}}],[\"若方法入参为空或不为事件类型\",{\"1\":{\"8\":1}}],[\"若方法入参为事件类型\",{\"1\":{\"8\":1}}],[\"入参依然可指定为某个事件类型\",{\"1\":{\"8\":1}}],[\"入参必须为该值对应的事件类型\",{\"1\":{\"8\":1}}],[\"经过实际测试\",{\"1\":{\"8\":1,\"9\":1}}],[\"多个值时\",{\"1\":{\"8\":1}}],[\"否则抛出参数类型错误异常\",{\"1\":{\"8\":1}}],[\"否则无操作\",{\"1\":{\"3\":1}}],[\"只有一个值时\",{\"1\":{\"8\":1}}],[\"有值\",{\"1\":{\"8\":1}}],[\"任何时候都不会被回调\",{\"1\":{\"8\":1}}],[\"任意类型\",{\"1\":{\"8\":1}}],[\"等同于classes指定了该事件\",{\"1\":{\"8\":1}}],[\"则查询\",{\"1\":{\"10\":1}}],[\"则可以正确回调\",{\"1\":{\"8\":1}}],[\"则入参不需要指定\",{\"1\":{\"8\":1}}],[\"则表示方法不关心任何事件\",{\"1\":{\"8\":1}}],[\"则表示只要事件发布了就回调\",{\"1\":{\"6\":1}}],[\"则代表是感兴趣的事件\",{\"1\":{\"8\":1}}],[\"个\",{\"1\":{\"8\":1}}],[\"或\",{\"1\":{\"8\":1}}],[\"无值\",{\"1\":{\"8\":1}}],[\"按\",{\"1\":{\"8\":1}}],[\"过于简单不再展示结果图片\",{\"1\":{\"6\":1}}],[\"3\",{\"1\":{\"6\":1}}],[\"可能读者会有疑惑\",{\"1\":{\"10\":1}}],[\"可在这个事件类里注入其它依赖或声明业务逻辑\",{\"1\":{\"6\":1}}],[\"可通过transactionsynchronizationmanager\",{\"1\":{\"9\":1}}],[\"可通过\",{\"1\":{\"6\":1}}],[\"步骤\",{\"1\":{\"6\":3}}],[\"并且得等到清理资源时才提交\",{\"1\":{\"12\":1}}],[\"并且至少得等到下一次有用户对\",{\"1\":{\"10\":1}}],[\"并通过注解属性指定回调时的事务阶段和感兴趣的事件\",{\"1\":{\"6\":1}}],[\"并可通过ordered接口控制多个事务同步的执行顺序\",{\"1\":{\"3\":1}}],[\"使用事务注解\",{\"1\":{\"6\":1}}],[\"使用注解标记方法\",{\"1\":{\"6\":1}}],[\"使用方式\",{\"0\":{\"4\":1}}],[\"进行编写\",{\"1\":{\"6\":1}}],[\"指定感兴趣的事件类名\",{\"1\":{\"6\":1}}],[\"指定事务阶段\",{\"1\":{\"6\":1}}],[\"fail\",{\"1\":{\"10\":1}}],[\"false\",{\"1\":{\"6\":1}}],[\"fallbackexecution\",{\"1\":{\"6\":1}}],[\"f\",{\"1\":{\"10\":11}}],[\"flush\",{\"1\":{\"3\":1}}],[\"不存在事务时\",{\"1\":{\"6\":1}}],[\"channel\",{\"1\":{\"10\":1}}],[\"component\",{\"1\":{\"6\":1}}],[\"commit\",{\"1\":{\"6\":2}}],[\"condition\",{\"1\":{\"6\":1}}],[\"classes指定多个值时\",{\"1\":{\"8\":1}}],[\"classes\",{\"1\":{\"6\":4}}],[\"class\",{\"1\":{\"3\":1,\"5\":3,\"6\":9,\"8\":2}}],[\"default\",{\"1\":{\"6\":5}}],[\"documented\",{\"1\":{\"6\":1}}],[\"db\",{\"1\":{\"2\":1,\"5\":1,\"6\":1,\"9\":1,\"10\":6,\"12\":1}}],[\"method\",{\"1\":{\"6\":1}}],[\"eventlistener\",{\"1\":{\"6\":3}}],[\"elementtype\",{\"1\":{\"6\":2}}],[\"exception\",{\"1\":{\"5\":1,\"6\":1}}],[\"extends\",{\"1\":{\"5\":1,\"6\":1}}],[\"如添加好友\",{\"1\":{\"10\":1}}],[\"如下\",{\"1\":{\"6\":1}}],[\"如资源准备\",{\"1\":{\"2\":1}}],[\"注意事项\",{\"0\":{\"7\":1}}],[\"注解方式方法入参问题\",{\"0\":{\"8\":1}}],[\"注解方式需要通过\",{\"1\":{\"6\":1}}],[\"注解的方法是否依然被调用\",{\"1\":{\"6\":1}}],[\"注册事务同步对象\",{\"1\":{\"5\":1}}],[\"基于注解\",{\"0\":{\"6\":1}}],[\"基于接口\",{\"0\":{\"5\":1}}],[\"即\",{\"1\":{\"10\":1}}],[\"即缺少最新的请求记录\",{\"1\":{\"10\":1}}],[\"即可看到注解方法内的内容输出\",{\"1\":{\"6\":1}}],[\"即可看到如下结果\",{\"1\":{\"5\":1}}],[\"即事务同步\",{\"1\":{\"2\":1}}],[\"之后调用事务接口\",{\"1\":{\"5\":1,\"6\":1}}],[\"update\",{\"1\":{\"5\":1,\"6\":1}}],[\"操作\",{\"1\":{\"5\":1,\"6\":1,\"10\":1}}],[\"模拟\",{\"1\":{\"5\":1,\"6\":1}}],[\"runtime\",{\"1\":{\"6\":1}}],[\"rollbackfor\",{\"1\":{\"5\":1,\"6\":1}}],[\"redis\",{\"1\":{\"10\":1}}],[\"request\",{\"1\":{\"10\":4}}],[\"req\",{\"1\":{\"10\":11}}],[\"retentionpolicy\",{\"1\":{\"6\":1}}],[\"retention\",{\"1\":{\"6\":1}}],[\"return\",{\"1\":{\"3\":1}}],[\"registersynchronization\",{\"1\":{\"5\":1}}],[\"resource\",{\"1\":{\"6\":1}}],[\"restcontroller\",{\"1\":{\"5\":1,\"6\":1}}],[\"resume\",{\"1\":{\"3\":1}}],[\"readonly\",{\"1\":{\"3\":1}}],[\"getmapping\",{\"1\":{\"5\":1,\"6\":1}}],[\"getorder\",{\"1\":{\"3\":1}}],[\"+\",{\"1\":{\"5\":2,\"10\":1}}],[\"=\",{\"1\":{\"5\":2,\"6\":7}}],[\"true\",{\"1\":{\"6\":1}}],[\"transaction\",{\"2\":{\"14\":1}}],[\"transactionphase\",{\"1\":{\"6\":3}}],[\"transactionaleventlistener注解classes属性是否有指定值分情况说明\",{\"1\":{\"8\":1}}],[\"transactionaleventlistener\",{\"1\":{\"6\":2}}],[\"transactionaleventlistener与applicationevent事件对象两者搭配使用\",{\"1\":{\"6\":1}}],[\"transactional\",{\"1\":{\"5\":1,\"6\":1}}],[\"transactional注解方法来完成事务操作\",{\"1\":{\"2\":1}}],[\"transactionsynchronizationmanager\",{\"1\":{\"5\":1}}],[\"transactionsynchronization\",{\"1\":{\"3\":1}}],[\"transactionsynchronizationadapter\",{\"1\":{\"3\":1,\"5\":1}}],[\"type\",{\"1\":{\"6\":1}}],[\"target\",{\"1\":{\"6\":1,\"10\":3}}],[\"this\",{\"1\":{\"5\":1}}],[\"txsyncevent\",{\"1\":{\"6\":4}}],[\"txsyncdemo\",{\"1\":{\"5\":3,\"6\":1}}],[\"txdemo\",{\"1\":{\"5\":2,\"6\":2}}],[\"txcontroller\",{\"1\":{\"5\":1,\"6\":1}}],[\"txname\",{\"1\":{\"5\":5}}],[\"创建事件类\",{\"1\":{\"6\":1}}],[\"创建事件对象\",{\"1\":{\"6\":1}}],[\"创建\",{\"1\":{\"5\":1}}],[\"未知错误\",{\"1\":{\"3\":1}}],[\"2\",{\"1\":{\"3\":1,\"6\":1,\"10\":4}}],[\"1\",{\"1\":{\"3\":1,\"6\":1,\"8\":1,\"10\":4}}],[\"0\",{\"1\":{\"3\":1,\"8\":1}}],[\"在君有项目中\",{\"1\":{\"11\":1}}],[\"在这两个方法中执行\",{\"1\":{\"9\":1}}],[\"在回调时事务资源可能仍然处于活跃状态并可访问\",{\"1\":{\"9\":1}}],[\"在事务明明已经提交的情况下\",{\"1\":{\"12\":1}}],[\"在事务完成后执行\",{\"1\":{\"10\":1}}],[\"在事务接口方法里\",{\"1\":{\"6\":1}}],[\"在事务方法中通过transactionsynchronizationmanager事务同步管理器注册事务同步\",{\"1\":{\"5\":1}}],[\"在相应的事务阶段回调方法中实现业务逻辑\",{\"1\":{\"5\":1}}],[\"在transactionsynchronization接口有定义\",{\"1\":{\"3\":1}}],[\"在aftercompletion方法的入参status有三种状态\",{\"1\":{\"3\":1}}],[\"在下方事务同步的两种使用方式本质都是利用了该抽象类来实现\",{\"1\":{\"3\":1}}],[\"在常规的\",{\"1\":{\"2\":1}}],[\"a\",{\"1\":{\"8\":3,\"10\":5}}],[\"applicationeventpublisher\",{\"1\":{\"6\":1}}],[\"applicationevent\",{\"1\":{\"6\":1}}],[\"attribute\",{\"1\":{\"6\":2}}],[\"aliasfor\",{\"1\":{\"6\":2}}],[\"after\",{\"1\":{\"6\":2}}],[\"aftercompletion方法回调时若有\",{\"1\":{\"12\":1}}],[\"aftercompletion\",{\"0\":{\"9\":1},\"1\":{\"3\":1,\"5\":1}}],[\"aftercommit\",{\"0\":{\"9\":1},\"1\":{\"3\":1,\"5\":1,\"6\":1,\"12\":1}}],[\"annotation\",{\"1\":{\"6\":3}}],[\"abstract\",{\"1\":{\"3\":1}}],[\"包括异常回滚\",{\"1\":{\"3\":2}}],[\"b\",{\"1\":{\"8\":2,\"10\":8}}],[\"beforecompletion\",{\"1\":{\"3\":1}}],[\"beforecommit\",{\"1\":{\"3\":1}}],[\"boolean\",{\"1\":{\"3\":1,\"6\":1}}],[\"需要继承transactionsynchronizationadapte抽象类\",{\"1\":{\"5\":1}}],[\"需要事务管理器有刷新概念\",{\"1\":{\"3\":1}}],[\"需要在事务提交前\",{\"1\":{\"2\":1}}],[\"底层数据会话刷新\",{\"1\":{\"3\":1}}],[\"success\",{\"1\":{\"10\":1}}],[\"super\",{\"1\":{\"6\":1}}],[\"suspend\",{\"1\":{\"3\":1}}],[\"source\",{\"1\":{\"6\":3}}],[\"spel\",{\"1\":{\"6\":1}}],[\"spring\",{\"0\":{\"1\":1},\"1\":{\"10\":1,\"11\":1,\"12\":1},\"2\":{\"13\":1,\"14\":1}}],[\"save\",{\"1\":{\"5\":1,\"6\":1}}],[\"system\",{\"1\":{\"5\":4,\"6\":1}}],[\"string\",{\"1\":{\"5\":2,\"6\":1}}],[\"status\",{\"1\":{\"3\":1,\"5\":2}}],[\"value\",{\"1\":{\"6\":1}}],[\"void\",{\"1\":{\"3\":7,\"5\":3,\"6\":2}}],[\"vuepress\",{\"1\":{\"0\":1}}],[\"posts\",{\"0\":{\"15\":1}}],[\"ps\",{\"1\":{\"10\":1,\"12\":1}}],[\"publishevent\",{\"1\":{\"6\":1}}],[\"publisher\",{\"1\":{\"6\":2}}],[\"public\",{\"1\":{\"3\":9,\"5\":6,\"6\":7}}],[\"phase\",{\"1\":{\"6\":2}}],[\"println\",{\"1\":{\"5\":4,\"6\":1}}],[\"private\",{\"1\":{\"5\":1,\"6\":1}}],[\"precedence\",{\"1\":{\"3\":1}}],[\"lowest\",{\"1\":{\"3\":1}}],[\"im\",{\"1\":{\"10\":1,\"11\":1}}],[\"implements\",{\"1\":{\"3\":1}}],[\"isactualtransactionactive\",{\"1\":{\"9\":1}}],[\"interface\",{\"1\":{\"6\":1}}],[\"int\",{\"1\":{\"3\":2,\"5\":1}}],[\"object\",{\"1\":{\"6\":1}}],[\"out\",{\"1\":{\"5\":4,\"6\":1}}],[\"override\",{\"1\":{\"3\":8,\"5\":2}}],[\"ordered\",{\"1\":{\"3\":2}}],[\"其抽象实现transactionsynchronizationadapter源码如下\",{\"1\":{\"3\":1}}],[\"自定义操作等\",{\"1\":{\"2\":1}}],[\"清理\",{\"1\":{\"2\":1}}],[\"提交后等情况下执行某些操作\",{\"1\":{\"2\":1}}],[\"大多是直接使用\",{\"1\":{\"2\":1}}],[\"应用中\",{\"1\":{\"2\":1}}],[\"web\",{\"1\":{\"2\":1}}],[\"前言\",{\"0\":{\"2\":1}}],[\"迁移\",{\"1\":{\"0\":1}}],[\"停更\",{\"1\":{\"0\":1}}],[\"编写第一篇文章\",{\"1\":{\"0\":1}}],[\"建站\",{\"1\":{\"0\":1}}],[\"hexo\",{\"1\":{\"0\":1}}],[\"业务开发一枚\",{\"1\":{\"0\":1}}],[\"javadoc\",{\"1\":{\"9\":1}}],[\"java\",{\"1\":{\"0\":1}}],[\"关于我\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
