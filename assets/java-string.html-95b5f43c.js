import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as e,e as a}from"./app-db5018a8.js";const t={},n=a('<h2 id="引子" tabindex="-1"><a class="header-anchor" href="#引子" aria-hidden="true">#</a> 引子</h2><p>相信每个 Javaer 都遇到这么一个问题，<code>String abc = new String(&quot;123&quot;);</code>，其作为八股文已经是老生常谈的问题，考究的是大伙对对象以及字符串在 JVM 中的存储理解。本篇文章就来深入研究下 String 方方面面的问题。</p><h2 id="string-内部结构" tabindex="-1"><a class="header-anchor" href="#string-内部结构" aria-hidden="true">#</a> String 内部结构</h2><ul><li>char[] value</li><li>不可变是否真的不可变？</li><li>8 / 9 的变化</li><li>是否线程安全</li></ul><h2 id="string-在-jvm-中的存储方式" tabindex="-1"><a class="header-anchor" href="#string-在-jvm-中的存储方式" aria-hidden="true">#</a> String 在 JVM 中的存储方式</h2><ul><li>堆（字符串对象）</li><li>元空间（字符串常量池）</li><li>intern 的理解</li></ul><h2 id="string-的-hash-算法" tabindex="-1"><a class="header-anchor" href="#string-的-hash-算法" aria-hidden="true">#</a> String 的 hash 算法</h2><ul><li>看看是否有必要吧，感觉这个有点说法</li></ul><h2 id="stringbuilder-与-stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuilder-与-stringbuffer" aria-hidden="true">#</a> StringBuilder 与 StringBuffer</h2><ul><li>两者对比</li><li>String 中如何默认使用的 StringBuilder</li></ul>',10),l=[n];function h(d,s){return r(),e("div",null,l)}const o=i(t,[["render",h],["__file","java-string.html.vue"]]);export{o as default};
